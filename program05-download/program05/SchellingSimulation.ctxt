#BlueJ class context
comment0.target=SchellingSimulation
comment0.text=\r\n\ \ This\ class\ is\ called\ "SchellingSimulation"\ \r\n\ \ that\ extends\ the\ "Picture"\ class.\ \r\n\ \ It\ contains\ several\ fields,\ including\ \r\n\ \ "satisfactionThreshold"\ and\ "redLine".\r\n\ \ This\ class\ is\ created\r\n\ \ Follow\ it\ with\ additional\ details\ about\ its\ purpose,\ what\ abstraction\r\n\ \ it\ represents,\ and\ how\ to\ use\ it.\r\n\r\n\ \ @author\ thulasiramanmt\r\n\ \ @version\ 2023.10.03\r\n
comment1.params=width\ height
comment1.target=SchellingSimulation(int,\ int)
comment1.text=\r\n\ Initializes\ a\ newly\ created\ SchellingSimulation\ object.\r\n\ \r\n\ @param\ width\ \ The\ width\ of\ the\ simulation\ grid.\r\n\ @param\ height\ The\ height\ of\ the\ simulation\ grid.\r\n\r\n
comment10.params=pixel
comment10.target=boolean\ maybeRelocate(student.media.Pixel)
comment10.text=\r\n\ Takes\ one\ Pixel\ object\ as\ a\ parameter\ \r\n\ and\ returns\ a\ boolean\ result.\ \r\n\ This\ method\ tries\ to\ move\ the\ corresponding\ agent\ \r\n\ to\ a\ new\ pixel\ location.\ This\ involves\ picking\ \r\n\ a\ new\ random\ x/y\ location\ in\ the\ \r\n\ image\ (below\ the\ redline,\ if\ the\ current\ \r\n\ pixel\ is\ occupied\ by\ an\ orange\ agent).\ If\ \r\n\ the\ selected\ location\ is\ empty,\ and\ if\ the\ \r\n\ current\ agent\ would\ be\ satisfied\ at\ the\ new\ \r\n\ location,\ then\ "move"\ the\ agent\ by\ setting\ the\ \r\n\ new\ location's\ color\ to\ the\ current\ pixel's\ \r\n\ color\ and\ setting\ the\ current\ pixel's\ color\ to\ Color.\r\n\ WHITE.\ Otherwise,\ leave\ the\ current\ agent\ \r\n\ in\ place,\ if\ it\ cannot\ be\ moved\ to\ the\ \r\n\ selected\ destination.\ Return\ true\ if\ the\ \r\n\ agent\ is\ moved,\ or\ false\ if\ the\ attempt\ \r\n\ to\ move\ fails.\r\n\ \r\n\ @param\ pixel\ The\ Pixel\ object\ \r\n\ representing\ the\ current\ agent's\ location.\r\n\ \r\n\ @return\ true\ if\ the\ agent\ is\ successfully\ moved\r\n
comment11.params=
comment11.target=int\ cycleAgents()
comment11.text=\r\n\ This\ method\ uses\ a\ loop\ over\ all\ pixels,\ \r\n\ checking\ each\ pixel\ in\ turn.\ \r\n\ If\ the\ pixel\ is\ empty,\ leave\ it\ alone.\ \r\n\ If\ it\ is\ occupied,\ check\ to\ see\ if\ the\ \r\n\ agent\ there\ is\ satisfied--if\ so,\ \r\n\ leave\ the\ agent\ alone.\ Otherwise,\ attempt\ to\ \r\n\ relocate\ it\ to\ a\ new\ position\ \r\n\ (which\ could\ succeed\ or\ fail,\ as\ \r\n\ described\ under\ maybeRelocate().\ \r\n\ The\ method\ returns\ the\ total\ number\ of\ \r\n\ successful\ moves\ after\ processing\ all\ pixels.\r\n\ \r\n\ @return\ The\ total\ number\ of\ successful\r\n\ agent\ moves\ after\ processing\ all\ pixels.\r\n
comment2.params=
comment2.target=double\ getSatisfactionThreshold()
comment2.text=\r\n\ A\ getter\ method\ that\ \r\n\ returns\ the\ satisfaction\ threshold\ (a\ double).\r\n\ \r\n\ @return\ The\ satisfaction\ threshold\ value.\r\n
comment3.params=threshold
comment3.target=void\ setSatisfactionThreshold(double)
comment3.text=\r\n\ A\ setter\ method\ that\ takes\ a\ double\ parameter\ \r\n\ and\ changes\ the\ satisfaction\ \r\n\ threshold\ to\ the\ specified\ value.\r\n\ \r\n\ @param\ threshold\ The\ new\ statusfaction\ threshold\ value\r\n\ to\ be\ set.\r\n
comment4.params=
comment4.target=int\ getRedLine()
comment4.text=\r\n\ A\ getter\ method\ that\ \r\n\ returns\ the\ redline\ value\ (an\ int).\r\n\ \r\n\ @return\ The\ redline\ value\ as\ an\ integer.\r\n
comment5.params=redLine
comment5.target=void\ setRedLine(int)
comment5.text=\r\n\ A\ setter\ method\ that\r\n\ takes\ an\ integer\ parameter\ and\ changes\ \r\n\ the\ redline\ to\ the\ specified\ value.\r\n\ \ \ \ \ \r\n\ @param\ redLine\ The\ new\ redline\ value\ to\ be\ set.\ \r\n
comment6.params=blueProbability\ orangeProbability
comment6.target=void\ populate(double,\ double)
comment6.text=\r\n\ Takes\ two\ double\ parameters\ between\ 0.0\ -\ 1.0\ that\ \r\n\ represent\ percentages.\ This\ method\ will\ "paint"\ \r\n\ the\ image\ with\ a\ randomized\ collection\ of\ blue\ \r\n\ and\ orange\ pixels.\ The\ first\ parameter\ represents\ \r\n\ the\ probabilty\ of\ any\ pixel\ in\ the\ image\ being\ set\ \r\n\ to\ blue\ (representing\ an\ X\ agent).\ \r\n\ The\ second\ represents\ the\ probability\ of\ any\ pixel\ \r\n\ in\ the\ image\ (below\ the\ redline)\ being\ set\ to\ orange\ \r\n\ (representing\ an\ O\ agent).\ Other\ pixels\ will\ be\ left\r\n\ alone\ (empty,\ represented\ by\ \ white\ ).\r\n\ \r\n\ @param\ blueProbability\ The\ probability\ \r\n\ (between\ 0.0\ and\ 1.0)\ of\ any\ pixel\ in\ the\ \r\n\ image\ being\ set\ to\ blue\r\n\ (representing\ an\ X\ agent).\r\n\ \r\n\ @param\ orangeProbability\ The\ probability\ \r\n\ (between\ 0.0\ and\ 1.0)\ of\ any\ pixel\ in\ \r\n\ the\ image\ (below\ the\ redline)\r\n\ being\ set\ to\ orange\ (representing\ an\ O\ agent).\r\n\r\n\ \r\n
comment7.params=pixel1\ pixel2
comment7.target=boolean\ areSameColor(student.media.Pixel,\ student.media.Pixel)
comment7.text=\r\n\ Takes\ two\ Pixel\ objects\ and\ returns\ a\ boolean\ \r\n\ value\ indicating\ whether\ the\ two\ pixels\ have\ \r\n\ the\ same\ color.\r\n\ \r\n\ @param\ pixel1\ The\ first\ Pixel\ object\ for\ comparison.\r\n\ @param\ pixel2\ The\ second\ Pixel\ object\ for\ comparison.\r\n\ \r\n\ @return\ true\ if\ the\ two\ pixels\ have\ the\ same\ color.\ \r\n
comment8.params=pixel
comment8.target=boolean\ isEmpty(student.media.Pixel)
comment8.text=\r\n\ Takes\ one\ Pixel\ object\ and\ returns\ true\ \r\n\ if\ its\ color\ is\ Color.WHITE,\ representing\ an\ \r\n\ empty\ location.\r\n\ \r\n\ @param\ pixel\ The\ Pixel\ object\ to\ be\ checked\ for\ emptiness.\r\n\ \r\n\ @return\ true\ if\ the\ pixel's\ color\ is\ Color.WHITE\ (empty).\r\n
comment9.params=pixel\ agentColor
comment9.target=boolean\ isSatisfied(student.media.Pixel,\ java.awt.Color)
comment9.text=\r\n\ Takes\ one\ Pixel\ object\ and\ a\ Color\ value,\ \r\n\ and\ returns\ a\ boolean\ result\ indicating\ \r\n\ whether\ an\ agent\ of\ the\ specified\ Color\ \r\n\ would\ be\ satisfied\ at\ the\ given\ Pixel\ location.\ \r\n\ It\ should\ return\ true\ if\ there\ are\ no\ \r\n\ neighboring\ agents,\ or\ if\ the\ proportion\ \r\n\ of\ neighboring\ agents\ the\ same\ color\ as\ \r\n\ the\ parameter\ meets\ or\ exceeds\ the\ \r\n\ satisfaction\ threshold.\ Remember\ \r\n\ not\ to\ count\ empty\ neighboring\ pixels,\ \r\n\ only\ neighboring\ agents.\r\n\ \r\n\ @param\ pixel\ The\ Pixel\ object\ \r\n\ representing\ the\ location.\r\n\ \r\n\ @param\ agentColor\ The\ Color\ value\ representing\ \r\n\ the\ agent's\ color.\r\n\ \r\n\ @return\ true\ if\ there\ are\ no\ neighboring\ agents\ or\ \r\n\ if\ the\ proportion\ of\ neighboring\ agents\ of\ the\ same\ color\r\n\ as\ the\ parameter\ meets\ or\ exceeds\ the\ satisfaction\ \r\n\ threshold.\r\n
numComments=12
